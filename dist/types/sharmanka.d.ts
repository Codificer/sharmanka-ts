export declare type SharmankaObserver = {
    onTick?: Function;
    onBuffer?: Function;
    onPlay?: Function;
    onPause?: Function;
    onStart?: Function;
    onEnd?: Function;
    onLoad?: Function;
    onLoadError?: Function;
    onError?: Function;
};
export declare type SharmankaType = {
    node: HTMLAudioElement | null;
    playPromise: Promise<undefined>;
    duration: number;
    currentTime: number;
    buffered: number;
    isUnlockedAudio: boolean;
    observers: SharmankaObserver[];
    init: () => void;
    destroy: () => void;
    onPlay: (callback?: Function) => void;
    onPause: (callback?: Function) => void;
    onStart: (callback?: Function) => void;
    onEnd: (callback?: Function) => void;
    onLoad: (callback?: Function) => void;
    onTick: (callback?: Function) => void;
    onBuffer: (callback?: Function) => void;
    onLoadError: (callback?: Function) => void;
    onError: (callback?: Function) => void;
    removeEvent: (eventName: string, callback?: Function) => void;
    isPlay: () => boolean | void;
    isMuted: () => boolean | void;
    isLooped: () => boolean | void;
    play: (callback?: Function) => void;
    pause: (callback?: Function) => void;
    volume: (value: number) => void;
    mute: () => void;
    loop: (loop: boolean) => void;
    seek: (value: number) => void;
    setTrack: (value: string) => string | void;
    togglePlay: () => boolean | void;
    listenerMoveMouse: (node: HTMLElement) => void;
    getDuration: () => void;
    getCurrentTime: () => void;
    getProgress: () => void;
    addObserver: (observer: SharmankaObserver) => void;
    removeObserver: (observer: SharmankaObserver) => void;
};
